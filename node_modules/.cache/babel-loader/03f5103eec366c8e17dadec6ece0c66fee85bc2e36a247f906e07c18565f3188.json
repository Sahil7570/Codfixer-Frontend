{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Desktop\\\\docfixer\\\\frontend\\\\src\\\\components\\\\DocConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DocConverter({\n  onFileConverted\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = async e => {\n    const f = e.target.files[0];\n    if (!f) return;\n    setFile(f);\n\n    // PDF -> Image conversion (simplified)\n    if (f.type === \"application/pdf\") {\n      onFileConverted(URL.createObjectURL(f));\n    } else {\n      // Image -> PDF\n      const pdfDoc = await PDFDocument.create();\n      const imgBytes = await f.arrayBuffer();\n      const img = f.type.includes(\"png\") ? await pdfDoc.embedPng(imgBytes) : await pdfDoc.embedJpg(imgBytes);\n      const page = pdfDoc.addPage([img.width, img.height]);\n      page.drawImage(img, {\n        x: 0,\n        y: 0,\n        width: img.width,\n        height: img.height\n      });\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], {\n        type: \"application/pdf\"\n      });\n      onFileConverted(URL.createObjectURL(blob));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(DocConverter, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = DocConverter;\nvar _c;\n$RefreshReg$(_c, \"DocConverter\");","map":{"version":3,"names":["React","useState","PDFDocument","jsxDEV","_jsxDEV","DocConverter","onFileConverted","_s","file","setFile","handleFileChange","e","f","target","files","type","URL","createObjectURL","pdfDoc","create","imgBytes","arrayBuffer","img","includes","embedPng","embedJpg","page","addPage","width","height","drawImage","x","y","pdfBytes","save","blob","Blob","style","textAlign","marginTop","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Desktop/docfixer/frontend/src/components/DocConverter.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\n\r\nexport default function DocConverter({ onFileConverted }) {\r\n  const [file, setFile] = useState(null);\r\n\r\n  const handleFileChange = async (e) => {\r\n    const f = e.target.files[0];\r\n    if (!f) return;\r\n    setFile(f);\r\n\r\n    // PDF -> Image conversion (simplified)\r\n    if (f.type === \"application/pdf\") {\r\n      onFileConverted(URL.createObjectURL(f));\r\n    } else {\r\n      // Image -> PDF\r\n      const pdfDoc = await PDFDocument.create();\r\n      const imgBytes = await f.arrayBuffer();\r\n      const img = f.type.includes(\"png\")\r\n        ? await pdfDoc.embedPng(imgBytes)\r\n        : await pdfDoc.embedJpg(imgBytes);\r\n      const page = pdfDoc.addPage([img.width, img.height]);\r\n      page.drawImage(img, { x: 0, y: 0, width: img.width, height: img.height });\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\r\n      onFileConverted(URL.createObjectURL(blob));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,eAAe,SAASC,YAAYA,CAAC;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EACxD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMS,gBAAgB,GAAG,MAAOC,CAAC,IAAK;IACpC,MAAMC,CAAC,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACF,CAAC,EAAE;IACRH,OAAO,CAACG,CAAC,CAAC;;IAEV;IACA,IAAIA,CAAC,CAACG,IAAI,KAAK,iBAAiB,EAAE;MAChCT,eAAe,CAACU,GAAG,CAACC,eAAe,CAACL,CAAC,CAAC,CAAC;IACzC,CAAC,MAAM;MACL;MACA,MAAMM,MAAM,GAAG,MAAMhB,WAAW,CAACiB,MAAM,CAAC,CAAC;MACzC,MAAMC,QAAQ,GAAG,MAAMR,CAAC,CAACS,WAAW,CAAC,CAAC;MACtC,MAAMC,GAAG,GAAGV,CAAC,CAACG,IAAI,CAACQ,QAAQ,CAAC,KAAK,CAAC,GAC9B,MAAML,MAAM,CAACM,QAAQ,CAACJ,QAAQ,CAAC,GAC/B,MAAMF,MAAM,CAACO,QAAQ,CAACL,QAAQ,CAAC;MACnC,MAAMM,IAAI,GAAGR,MAAM,CAACS,OAAO,CAAC,CAACL,GAAG,CAACM,KAAK,EAAEN,GAAG,CAACO,MAAM,CAAC,CAAC;MACpDH,IAAI,CAACI,SAAS,CAACR,GAAG,EAAE;QAAES,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEJ,KAAK,EAAEN,GAAG,CAACM,KAAK;QAAEC,MAAM,EAAEP,GAAG,CAACO;MAAO,CAAC,CAAC;MACzE,MAAMI,QAAQ,GAAG,MAAMf,MAAM,CAACgB,IAAI,CAAC,CAAC;MACpC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,QAAQ,CAAC,EAAE;QAAElB,IAAI,EAAE;MAAkB,CAAC,CAAC;MAC9DT,eAAe,CAACU,GAAG,CAACC,eAAe,CAACkB,IAAI,CAAC,CAAC;IAC5C;EACF,CAAC;EAED,oBACE/B,OAAA;IAAKiC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,eACrDpC,OAAA;MAAOW,IAAI,EAAC,MAAM;MAAC0B,QAAQ,EAAE/B;IAAiB;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAACtC,EAAA,CA/BuBF,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}