{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Desktop\\\\docfixer\\\\frontend\\\\src\\\\components\\\\DocScanner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Tesseract from \"tesseract.js\";\nimport cv from \"opencv.js\"; // Ensure opencv.js is loaded\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DocScanner = ({\n  image,\n  onUpdate,\n  onOCR\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [previewURL, setPreviewURL] = useState(null);\n  const [brightness, setBrightness] = useState(100); // Default 100%\n  const [contrast, setContrast] = useState(100); // Default 100%\n  const canvasRef = useRef(null);\n  const [scannedMat, setScannedMat] = useState(null);\n\n  // Load image and scan automatically\n  useEffect(() => {\n    if (!image) return;\n    const scanImage = async () => {\n      setLoading(true);\n      try {\n        const img = await fetch(image).then(r => r.blob());\n        const imgURL = URL.createObjectURL(img);\n        const imageElement = new Image();\n        imageElement.src = imgURL;\n        await new Promise(resolve => imageElement.onload = resolve);\n        const src = cv.imread(imageElement);\n        let gray = new cv.Mat();\n        cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);\n        cv.GaussianBlur(gray, gray, new cv.Size(5, 5), 0);\n        const edges = new cv.Mat();\n        cv.Canny(gray, edges, 75, 200);\n        const contours = new cv.MatVector();\n        const hierarchy = new cv.Mat();\n        cv.findContours(edges, contours, hierarchy, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE);\n\n        // Find largest 4-point contour\n        let maxArea = 0;\n        let docContour = null;\n        for (let i = 0; i < contours.size(); i++) {\n          const cnt = contours.get(i);\n          const area = cv.contourArea(cnt, false);\n          if (area > maxArea) {\n            const peri = cv.arcLength(cnt, true);\n            const approx = new cv.Mat();\n            cv.approxPolyDP(cnt, approx, 0.02 * peri, true);\n            if (approx.rows === 4) {\n              maxArea = area;\n              docContour = approx;\n            }\n          }\n        }\n        if (!docContour) {\n          alert(\"Could not detect document edges. Using original image.\");\n          setPreviewURL(image);\n          onUpdate(image);\n          setLoading(false);\n          return;\n        }\n\n        // Perspective transform\n        const pts = [];\n        for (let i = 0; i < 4; i++) {\n          pts.push({\n            x: docContour.data32S[i * 2],\n            y: docContour.data32S[i * 2 + 1]\n          });\n        }\n        pts.sort((a, b) => a.y - b.y);\n        const top = pts.slice(0, 2).sort((a, b) => a.x - b.x);\n        const bottom = pts.slice(2, 4).sort((a, b) => a.x - b.x);\n        const ordered = [top[0], top[1], bottom[1], bottom[0]];\n        const widthA = Math.hypot(ordered[2].x - ordered[3].x, ordered[2].y - ordered[3].y);\n        const widthB = Math.hypot(ordered[1].x - ordered[0].x, ordered[1].y - ordered[0].y);\n        const heightA = Math.hypot(ordered[1].x - ordered[2].x, ordered[1].y - ordered[2].y);\n        const heightB = Math.hypot(ordered[0].x - ordered[3].x, ordered[0].y - ordered[3].y);\n        const maxWidth = Math.max(widthA, widthB);\n        const maxHeight = Math.max(heightA, heightB);\n        const srcTri = cv.matFromArray(4, 1, cv.CV_32FC2, [ordered[0].x, ordered[0].y, ordered[1].x, ordered[1].y, ordered[2].x, ordered[2].y, ordered[3].x, ordered[3].y]);\n        const dstTri = cv.matFromArray(4, 1, cv.CV_32FC2, [0, 0, maxWidth - 1, 0, maxWidth - 1, maxHeight - 1, 0, maxHeight - 1]);\n        const M = cv.getPerspectiveTransform(srcTri, dstTri);\n        const scanned = new cv.Mat();\n        cv.warpPerspective(src, scanned, M, new cv.Size(maxWidth, maxHeight));\n        setScannedMat(scanned);\n\n        // Initial display\n        const canvas = canvasRef.current;\n        canvas.width = scanned.cols;\n        canvas.height = scanned.rows;\n        cv.imshow(canvas, scanned);\n        setPreviewURL(canvas.toDataURL(\"image/jpeg\"));\n\n        // Cleanup\n        src.delete();\n        gray.delete();\n        edges.delete();\n        contours.delete();\n        hierarchy.delete();\n        docContour.delete();\n        srcTri.delete();\n        dstTri.delete();\n        M.delete();\n      } catch (err) {\n        alert(\"Document scanning failed: \" + err.message);\n        console.error(err);\n      }\n      setLoading(false);\n    };\n    scanImage();\n  }, [image]);\n\n  // Apply brightness and contrast dynamically\n  useEffect(() => {\n    if (!scannedMat) return;\n    const temp = scannedMat.clone();\n\n    // Apply contrast & brightness\n    temp.convertTo(temp, -1, contrast / 100, (brightness - 100) * 1.5);\n    const canvas = canvasRef.current;\n    cv.imshow(canvas, temp);\n    setPreviewURL(canvas.toDataURL(\"image/jpeg\"));\n    temp.delete();\n  }, [brightness, contrast, scannedMat]);\n  const handleSave = () => {\n    onUpdate(previewURL);\n    if (onOCR) onOCR(previewURL);\n    alert(\"Scanned document saved!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"10px\"\n    },\n    children: image && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          width: \"100%\",\n          maxHeight: \"400px\",\n          border: \"1px solid #ccc\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Brightness: \", brightness, \"%\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"50\",\n            max: \"150\",\n            value: brightness,\n            onChange: e => setBrightness(Number(e.target.value)),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Contrast: \", contrast, \"%\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"50\",\n            max: \"150\",\n            value: contrast,\n            onChange: e => setContrast(Number(e.target.value)),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          disabled: loading,\n          style: {\n            marginTop: \"10px\"\n          },\n          children: loading ? \"Scanning...\" : \"Save Scanned Document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(DocScanner, \"xtXsMktoa8uiqsQObEO5TZF8ESo=\");\n_c = DocScanner;\nexport default DocScanner;\nvar _c;\n$RefreshReg$(_c, \"DocScanner\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Tesseract","cv","jsxDEV","_jsxDEV","Fragment","_Fragment","DocScanner","image","onUpdate","onOCR","_s","loading","setLoading","previewURL","setPreviewURL","brightness","setBrightness","contrast","setContrast","canvasRef","scannedMat","setScannedMat","scanImage","img","fetch","then","r","blob","imgURL","URL","createObjectURL","imageElement","Image","src","Promise","resolve","onload","imread","gray","Mat","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","Size","edges","Canny","contours","MatVector","hierarchy","findContours","RETR_LIST","CHAIN_APPROX_SIMPLE","maxArea","docContour","i","size","cnt","get","area","contourArea","peri","arcLength","approx","approxPolyDP","rows","alert","pts","push","x","data32S","y","sort","a","b","top","slice","bottom","ordered","widthA","Math","hypot","widthB","heightA","heightB","maxWidth","max","maxHeight","srcTri","matFromArray","CV_32FC2","dstTri","M","getPerspectiveTransform","scanned","warpPerspective","canvas","current","width","cols","height","imshow","toDataURL","delete","err","message","console","error","temp","clone","convertTo","handleSave","style","marginTop","children","ref","border","fileName","_jsxFileName","lineNumber","columnNumber","type","min","value","onChange","e","Number","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Desktop/docfixer/frontend/src/components/DocScanner.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport cv from \"opencv.js\"; // Ensure opencv.js is loaded\r\n\r\nconst DocScanner = ({ image, onUpdate, onOCR }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [previewURL, setPreviewURL] = useState(null);\r\n  const [brightness, setBrightness] = useState(100); // Default 100%\r\n  const [contrast, setContrast] = useState(100); // Default 100%\r\n  const canvasRef = useRef(null);\r\n  const [scannedMat, setScannedMat] = useState(null);\r\n\r\n  // Load image and scan automatically\r\n  useEffect(() => {\r\n    if (!image) return;\r\n\r\n    const scanImage = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const img = await fetch(image).then((r) => r.blob());\r\n        const imgURL = URL.createObjectURL(img);\r\n\r\n        const imageElement = new Image();\r\n        imageElement.src = imgURL;\r\n        await new Promise((resolve) => (imageElement.onload = resolve));\r\n\r\n        const src = cv.imread(imageElement);\r\n        let gray = new cv.Mat();\r\n        cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);\r\n        cv.GaussianBlur(gray, gray, new cv.Size(5, 5), 0);\r\n\r\n        const edges = new cv.Mat();\r\n        cv.Canny(gray, edges, 75, 200);\r\n\r\n        const contours = new cv.MatVector();\r\n        const hierarchy = new cv.Mat();\r\n        cv.findContours(edges, contours, hierarchy, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE);\r\n\r\n        // Find largest 4-point contour\r\n        let maxArea = 0;\r\n        let docContour = null;\r\n        for (let i = 0; i < contours.size(); i++) {\r\n          const cnt = contours.get(i);\r\n          const area = cv.contourArea(cnt, false);\r\n          if (area > maxArea) {\r\n            const peri = cv.arcLength(cnt, true);\r\n            const approx = new cv.Mat();\r\n            cv.approxPolyDP(cnt, approx, 0.02 * peri, true);\r\n            if (approx.rows === 4) {\r\n              maxArea = area;\r\n              docContour = approx;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!docContour) {\r\n          alert(\"Could not detect document edges. Using original image.\");\r\n          setPreviewURL(image);\r\n          onUpdate(image);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Perspective transform\r\n        const pts = [];\r\n        for (let i = 0; i < 4; i++) {\r\n          pts.push({ x: docContour.data32S[i * 2], y: docContour.data32S[i * 2 + 1] });\r\n        }\r\n\r\n        pts.sort((a, b) => a.y - b.y);\r\n        const top = pts.slice(0, 2).sort((a, b) => a.x - b.x);\r\n        const bottom = pts.slice(2, 4).sort((a, b) => a.x - b.x);\r\n        const ordered = [top[0], top[1], bottom[1], bottom[0]];\r\n\r\n        const widthA = Math.hypot(ordered[2].x - ordered[3].x, ordered[2].y - ordered[3].y);\r\n        const widthB = Math.hypot(ordered[1].x - ordered[0].x, ordered[1].y - ordered[0].y);\r\n        const heightA = Math.hypot(ordered[1].x - ordered[2].x, ordered[1].y - ordered[2].y);\r\n        const heightB = Math.hypot(ordered[0].x - ordered[3].x, ordered[0].y - ordered[3].y);\r\n\r\n        const maxWidth = Math.max(widthA, widthB);\r\n        const maxHeight = Math.max(heightA, heightB);\r\n\r\n        const srcTri = cv.matFromArray(4, 1, cv.CV_32FC2, [\r\n          ordered[0].x, ordered[0].y,\r\n          ordered[1].x, ordered[1].y,\r\n          ordered[2].x, ordered[2].y,\r\n          ordered[3].x, ordered[3].y\r\n        ]);\r\n\r\n        const dstTri = cv.matFromArray(4, 1, cv.CV_32FC2, [\r\n          0, 0,\r\n          maxWidth - 1, 0,\r\n          maxWidth - 1, maxHeight - 1,\r\n          0, maxHeight - 1\r\n        ]);\r\n\r\n        const M = cv.getPerspectiveTransform(srcTri, dstTri);\r\n        const scanned = new cv.Mat();\r\n        cv.warpPerspective(src, scanned, M, new cv.Size(maxWidth, maxHeight));\r\n\r\n        setScannedMat(scanned);\r\n\r\n        // Initial display\r\n        const canvas = canvasRef.current;\r\n        canvas.width = scanned.cols;\r\n        canvas.height = scanned.rows;\r\n        cv.imshow(canvas, scanned);\r\n        setPreviewURL(canvas.toDataURL(\"image/jpeg\"));\r\n\r\n        // Cleanup\r\n        src.delete();\r\n        gray.delete();\r\n        edges.delete();\r\n        contours.delete();\r\n        hierarchy.delete();\r\n        docContour.delete();\r\n        srcTri.delete();\r\n        dstTri.delete();\r\n        M.delete();\r\n\r\n      } catch (err) {\r\n        alert(\"Document scanning failed: \" + err.message);\r\n        console.error(err);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    scanImage();\r\n  }, [image]);\r\n\r\n  // Apply brightness and contrast dynamically\r\n  useEffect(() => {\r\n    if (!scannedMat) return;\r\n    const temp = scannedMat.clone();\r\n\r\n    // Apply contrast & brightness\r\n    temp.convertTo(temp, -1, contrast / 100, (brightness - 100) * 1.5);\r\n\r\n    const canvas = canvasRef.current;\r\n    cv.imshow(canvas, temp);\r\n    setPreviewURL(canvas.toDataURL(\"image/jpeg\"));\r\n    temp.delete();\r\n  }, [brightness, contrast, scannedMat]);\r\n\r\n  const handleSave = () => {\r\n    onUpdate(previewURL);\r\n    if (onOCR) onOCR(previewURL);\r\n    alert(\"Scanned document saved!\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"10px\" }}>\r\n      {image && (\r\n        <>\r\n          <canvas ref={canvasRef} style={{ width: \"100%\", maxHeight: \"400px\", border: \"1px solid #ccc\" }} />\r\n          <div style={{ marginTop: \"10px\" }}>\r\n            <label>\r\n              Brightness: {brightness}%\r\n              <input\r\n                type=\"range\"\r\n                min=\"50\"\r\n                max=\"150\"\r\n                value={brightness}\r\n                onChange={(e) => setBrightness(Number(e.target.value))}\r\n                style={{ width: \"100%\" }}\r\n              />\r\n            </label>\r\n            <label>\r\n              Contrast: {contrast}%\r\n              <input\r\n                type=\"range\"\r\n                min=\"50\"\r\n                max=\"150\"\r\n                value={contrast}\r\n                onChange={(e) => setContrast(Number(e.target.value))}\r\n                style={{ width: \"100%\" }}\r\n              />\r\n            </label>\r\n            <button onClick={handleSave} disabled={loading} style={{ marginTop: \"10px\" }}>\r\n              {loading ? \"Scanning...\" : \"Save Scanned Document\"}\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocScanner;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}