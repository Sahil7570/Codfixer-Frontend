{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Desktop\\\\docfixer\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Rnd } from \"react-rnd\";\nimport { jsPDF } from \"jspdf\";\nimport { PDFDocument } from \"pdf-lib\";\nimport Tesseract from \"tesseract.js\";\nimport { HexColorPicker } from \"react-colorful\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _texts$find, _texts$find2, _texts$find3;\n  const [file, setFile] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [filter, setFilter] = useState(\"none\");\n  const [filterIntensity, setFilterIntensity] = useState(100);\n  const [compression, setCompression] = useState(100);\n  const [texts, setTexts] = useState([]);\n  const [selectedTextId, setSelectedTextId] = useState(null);\n  const [showTextTools, setShowTextTools] = useState(false);\n  const [ocrText, setOcrText] = useState(\"\");\n  const [scannedFiles, setScannedFiles] = useState([]);\n\n  // ===== File Handling =====\n  const handleFileChange = e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setFile(uploadedFile);\n    setImageURL(URL.createObjectURL(uploadedFile));\n    setProcessedImage(null);\n    setTexts([]);\n    setOcrText(\"\");\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const droppedFile = e.dataTransfer.files[0];\n    if (!droppedFile) return;\n    setFile(droppedFile);\n    setImageURL(URL.createObjectURL(droppedFile));\n    setProcessedImage(null);\n    setTexts([]);\n    setOcrText(\"\");\n  };\n  const handleDragOver = e => e.preventDefault();\n\n  // ===== Remove Background =====\n  const handleRemoveBG = async () => {\n    if (!file) return alert(\"Upload an image first\");\n    if (file.type.includes(\"pdf\")) return alert(\"Remove.bg works only with images\");\n    const formData = new FormData();\n    formData.append(\"image_file\", file);\n    try {\n      const res = await axios.post(\"https://api.remove.bg/v1.0/removebg\", formData, {\n        headers: {\n          \"X-Api-Key\": \"VSNXBaMjvgBp6NjjRheLV3cW\"\n        },\n        responseType: \"blob\"\n      });\n      setProcessedImage(URL.createObjectURL(res.data));\n    } catch (err) {\n      alert(\"Remove.bg API error: \" + err.message);\n    }\n  };\n\n  // ===== Filters =====\n  const getFilterStyle = () => {\n    const i = filterIntensity;\n    switch (filter) {\n      case \"grayscale\":\n        return {\n          filter: `grayscale(${i}%)`\n        };\n      case \"sepia\":\n        return {\n          filter: `sepia(${i}%)`\n        };\n      case \"invert\":\n        return {\n          filter: `invert(${i}%)`\n        };\n      case \"blur\":\n        return {\n          filter: `blur(${i / 20}px)`\n        };\n      case \"brightness\":\n        return {\n          filter: `brightness(${i}%)`\n        };\n      case \"contrast\":\n        return {\n          filter: `contrast(${i}%)`\n        };\n      case \"saturate\":\n        return {\n          filter: `saturate(${i}%)`\n        };\n      case \"hue-rotate\":\n        return {\n          filter: `hue-rotate(${i * 3.6}deg)`\n        };\n      default:\n        return {};\n    }\n  };\n\n  // ===== Text Overlay =====\n  const addText = () => {\n    const newText = {\n      id: Date.now(),\n      text: \"New Text\",\n      color: \"#ff0000\",\n      fontSize: 24,\n      fontWeight: 400,\n      x: 50,\n      y: 50,\n      width: 200,\n      height: 50,\n      rotation: 0,\n      opacity: 1\n    };\n    setTexts([...texts, newText]);\n    setSelectedTextId(newText.id);\n    setShowTextTools(true);\n  };\n  const updateText = (id, key, value) => {\n    setTexts(texts.map(t => t.id === id ? {\n      ...t,\n      [key]: value\n    } : t));\n  };\n  const deleteText = id => {\n    setTexts(texts.filter(t => t.id !== id));\n    if (selectedTextId === id) setSelectedTextId(null);\n  };\n\n  // ===== Generate Image =====\n  const generateFinalImage = () => {\n    return new Promise(resolve => {\n      const source = processedImage || imageURL;\n      if (!source) return resolve(null);\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.filter = getFilterStyle().filter || \"none\";\n        ctx.drawImage(img, 0, 0);\n        texts.forEach(t => {\n          ctx.save();\n          ctx.translate(t.x + t.width / 2, t.y + t.height / 2);\n          ctx.rotate(t.rotation * Math.PI / 180);\n          ctx.globalAlpha = t.opacity;\n          ctx.font = `${t.fontWeight} ${t.fontSize}px Arial`;\n          ctx.fillStyle = t.color;\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillText(t.text, 0, 0);\n          ctx.restore();\n        });\n        resolve(canvas.toDataURL(\"image/jpeg\", compression / 100));\n      };\n      img.src = source;\n    });\n  };\n\n  // ===== Download =====\n  const handleDownloadImage = async format => {\n    const finalDataURL = await generateFinalImage();\n    if (!finalDataURL) return;\n    if (format === \"pdf\") {\n      const doc = new jsPDF();\n      doc.addImage(finalDataURL, \"JPEG\", 10, 10, 190, 0);\n      doc.save(\"docfixer.pdf\");\n    } else {\n      const link = document.createElement(\"a\");\n      link.href = finalDataURL;\n      link.download = `docfixer.${format}`;\n      link.click();\n    }\n  };\n\n  // ===== OCR =====\n  const handleOCR = async () => {\n    if (!file || !file.type.startsWith(\"image/\")) return alert(\"Upload an image for OCR\");\n    setOcrText(\"Processing...\");\n    Tesseract.recognize(file, \"eng\").then(({\n      data: {\n        text\n      }\n    }) => setOcrText(text));\n  };\n\n  // ===== Doc Scanner =====\n  const handleDocScanner = async () => {\n    if (!scannedFiles.length) return alert(\"No images scanned yet\");\n    const pdfDoc = await PDFDocument.create();\n    for (let imgFile of scannedFiles) {\n      const bytes = await imgFile.arrayBuffer();\n      const img = imgFile.type.includes(\"png\") ? await pdfDoc.embedPng(bytes) : await pdfDoc.embedJpg(bytes);\n      const page = pdfDoc.addPage([img.width, img.height]);\n      page.drawImage(img, {\n        x: 0,\n        y: 0,\n        width: img.width,\n        height: img.height\n      });\n    }\n    const pdfBytes = await pdfDoc.save();\n    const blob = new Blob([pdfBytes], {\n      type: \"application/pdf\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"scanned.pdf\";\n    link.click();\n  };\n  const addScannedFile = e => setScannedFiles([...scannedFiles, ...Array.from(e.target.files)]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      children: !imageURL ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-zone\",\n        onDrop: handleDrop,\n        onDragOver: handleDragOver,\n        onClick: () => document.getElementById(\"fileInput\").click(),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag & Drop file here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"fileInput\",\n          type: \"file\",\n          accept: \"image/*,application/pdf\",\n          onChange: handleFileChange,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: ocrText ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 3,\n              position: \"relative\",\n              minHeight: \"500px\",\n              border: \"1px solid #ccc\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: processedImage || imageURL,\n              alt: \"Preview\",\n              style: {\n                maxWidth: \"100%\",\n                display: \"block\",\n                ...getFilterStyle()\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), texts.map(t => /*#__PURE__*/_jsxDEV(Rnd, {\n              size: {\n                width: t.width,\n                height: t.height\n              },\n              position: {\n                x: t.x,\n                y: t.y\n              },\n              bounds: \"parent\",\n              enableResizing: true,\n              enableUserSelectHack: true,\n              onDragStop: (e, d) => {\n                updateText(t.id, \"x\", d.x);\n                updateText(t.id, \"y\", d.y);\n              },\n              onResizeStop: (e, dir, ref, delta, pos) => {\n                updateText(t.id, \"width\", parseInt(ref.style.width));\n                updateText(t.id, \"height\", parseInt(ref.style.height));\n                updateText(t.id, \"x\", pos.x);\n                updateText(t.id, \"y\", pos.y);\n              },\n              onClick: () => setSelectedTextId(t.id),\n              style: {\n                position: \"absolute\",\n                border: selectedTextId === t.id ? \"2px dashed #007bff\" : \"none\",\n                backgroundColor: \"transparent\",\n                padding: 2,\n                cursor: \"move\"\n              },\n              children: [selectedTextId === t.id && /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  deleteText(t.id);\n                },\n                style: {\n                  position: \"absolute\",\n                  top: -10,\n                  left: -10,\n                  backgroundColor: \"#ff4d4f\",\n                  color: \"#fff\",\n                  borderRadius: \"50%\",\n                  width: 20,\n                  height: 20,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  cursor: \"pointer\",\n                  fontSize: 12,\n                  fontWeight: \"bold\",\n                  zIndex: 10\n                },\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 25\n              }, this), selectedTextId === t.id && /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  setSelectedTextId(null);\n                },\n                style: {\n                  position: \"absolute\",\n                  top: -10,\n                  right: -10,\n                  backgroundColor: \"#4CAF50\",\n                  color: \"#fff\",\n                  borderRadius: \"50%\",\n                  width: 20,\n                  height: 20,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  cursor: \"pointer\",\n                  fontSize: 12,\n                  fontWeight: \"bold\",\n                  zIndex: 10\n                },\n                children: \"\\u2713\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: `text-${t.id}`,\n                contentEditable: true,\n                suppressContentEditableWarning: true,\n                style: {\n                  display: \"inline-block\",\n                  color: t.color,\n                  fontSize: t.fontSize,\n                  fontWeight: t.fontWeight || 400,\n                  outline: \"none\",\n                  whiteSpace: \"pre-wrap\",\n                  wordBreak: \"break-word\",\n                  direction: \"ltr\",\n                  textAlign: \"center\",\n                  padding: \"2px 4px\"\n                },\n                onInput: e => {\n                  const div = e.currentTarget;\n                  updateText(t.id, \"text\", div.textContent);\n                  updateText(t.id, \"width\", div.scrollWidth + 8);\n                  updateText(t.id, \"height\", div.scrollHeight + 4);\n                },\n                children: t.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 23\n              }, this)]\n            }, t.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this), showTextTools && selectedTextId && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              border: \"1px solid #ccc\",\n              padding: 10\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Text Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Font Size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: ((_texts$find = texts.find(t => t.id === selectedTextId)) === null || _texts$find === void 0 ? void 0 : _texts$find.fontSize) || 24,\n                onChange: e => updateText(selectedTextId, \"fontSize\", parseInt(e.target.value)),\n                style: {\n                  width: 50,\n                  marginLeft: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: 10\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Color:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(HexColorPicker, {\n                color: ((_texts$find2 = texts.find(t => t.id === selectedTextId)) === null || _texts$find2 === void 0 ? void 0 : _texts$find2.color) || \"#ff0000\",\n                onChange: color => updateText(selectedTextId, \"color\", color)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: 10\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Thickness:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                min: \"100\",\n                max: \"900\",\n                step: \"100\",\n                value: ((_texts$find3 = texts.find(t => t.id === selectedTextId)) === null || _texts$find3 === void 0 ? void 0 : _texts$find3.fontWeight) || 400,\n                onChange: e => {\n                  updateText(selectedTextId, \"fontWeight\", e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"embed\", {\n          src: imageURL,\n          type: \"application/pdf\",\n          width: \"100%\",\n          height: \"500px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eom48rBm/1BujgYfMSdqm0hAd5Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Rnd","jsPDF","PDFDocument","Tesseract","HexColorPicker","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_texts$find","_texts$find2","_texts$find3","file","setFile","imageURL","setImageURL","processedImage","setProcessedImage","filter","setFilter","filterIntensity","setFilterIntensity","compression","setCompression","texts","setTexts","selectedTextId","setSelectedTextId","showTextTools","setShowTextTools","ocrText","setOcrText","scannedFiles","setScannedFiles","handleFileChange","e","uploadedFile","target","files","URL","createObjectURL","handleDrop","preventDefault","droppedFile","dataTransfer","handleDragOver","handleRemoveBG","alert","type","includes","formData","FormData","append","res","post","headers","responseType","data","err","message","getFilterStyle","i","addText","newText","id","Date","now","text","color","fontSize","fontWeight","x","y","width","height","rotation","opacity","updateText","key","value","map","t","deleteText","generateFinalImage","Promise","resolve","source","img","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","drawImage","forEach","save","translate","rotate","Math","PI","globalAlpha","font","fillStyle","textAlign","textBaseline","fillText","restore","toDataURL","src","handleDownloadImage","format","finalDataURL","doc","addImage","link","href","download","click","handleOCR","startsWith","recognize","then","handleDocScanner","length","pdfDoc","create","imgFile","bytes","arrayBuffer","embedPng","embedJpg","page","addPage","pdfBytes","blob","Blob","addScannedFile","Array","from","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDrop","onDragOver","onClick","getElementById","accept","onChange","style","display","gap","flex","position","minHeight","border","alt","maxWidth","size","bounds","enableResizing","enableUserSelectHack","onDragStop","d","onResizeStop","dir","ref","delta","pos","parseInt","backgroundColor","padding","cursor","stopPropagation","top","left","borderRadius","alignItems","justifyContent","zIndex","right","contentEditable","suppressContentEditableWarning","outline","whiteSpace","wordBreak","direction","onInput","div","currentTarget","textContent","scrollWidth","scrollHeight","find","marginLeft","marginTop","min","max","step","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Desktop/docfixer/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Rnd } from \"react-rnd\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport { HexColorPicker } from \"react-colorful\";\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const [processedImage, setProcessedImage] = useState(null);\r\n  const [filter, setFilter] = useState(\"none\");\r\n  const [filterIntensity, setFilterIntensity] = useState(100);\r\n  const [compression, setCompression] = useState(100);\r\n  const [texts, setTexts] = useState([]);\r\n  const [selectedTextId, setSelectedTextId] = useState(null);\r\n  const [showTextTools, setShowTextTools] = useState(false);\r\n  const [ocrText, setOcrText] = useState(\"\");\r\n  const [scannedFiles, setScannedFiles] = useState([]);\r\n\r\n  // ===== File Handling =====\r\n  const handleFileChange = (e) => {\r\n    const uploadedFile = e.target.files[0];\r\n    if (!uploadedFile) return;\r\n    setFile(uploadedFile);\r\n    setImageURL(URL.createObjectURL(uploadedFile));\r\n    setProcessedImage(null);\r\n    setTexts([]);\r\n    setOcrText(\"\");\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const droppedFile = e.dataTransfer.files[0];\r\n    if (!droppedFile) return;\r\n    setFile(droppedFile);\r\n    setImageURL(URL.createObjectURL(droppedFile));\r\n    setProcessedImage(null);\r\n    setTexts([]);\r\n    setOcrText(\"\");\r\n  };\r\n\r\n  const handleDragOver = (e) => e.preventDefault();\r\n\r\n  // ===== Remove Background =====\r\n  const handleRemoveBG = async () => {\r\n    if (!file) return alert(\"Upload an image first\");\r\n    if (file.type.includes(\"pdf\"))\r\n      return alert(\"Remove.bg works only with images\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"image_file\", file);\r\n    try {\r\n      const res = await axios.post(\r\n        \"https://api.remove.bg/v1.0/removebg\",\r\n        formData,\r\n        {\r\n          headers: { \"X-Api-Key\": \"VSNXBaMjvgBp6NjjRheLV3cW\" },\r\n          responseType: \"blob\",\r\n        }\r\n      );\r\n      setProcessedImage(URL.createObjectURL(res.data));\r\n    } catch (err) {\r\n      alert(\"Remove.bg API error: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // ===== Filters =====\r\n  const getFilterStyle = () => {\r\n    const i = filterIntensity;\r\n    switch (filter) {\r\n      case \"grayscale\":\r\n        return { filter: `grayscale(${i}%)` };\r\n      case \"sepia\":\r\n        return { filter: `sepia(${i}%)` };\r\n      case \"invert\":\r\n        return { filter: `invert(${i}%)` };\r\n      case \"blur\":\r\n        return { filter: `blur(${i / 20}px)` };\r\n      case \"brightness\":\r\n        return { filter: `brightness(${i}%)` };\r\n      case \"contrast\":\r\n        return { filter: `contrast(${i}%)` };\r\n      case \"saturate\":\r\n        return { filter: `saturate(${i}%)` };\r\n      case \"hue-rotate\":\r\n        return { filter: `hue-rotate(${i * 3.6}deg)` };\r\n      default:\r\n        return {};\r\n    }\r\n  };\r\n\r\n  // ===== Text Overlay =====\r\n  const addText = () => {\r\n    const newText = {\r\n      id: Date.now(),\r\n      text: \"New Text\",\r\n      color: \"#ff0000\",\r\n      fontSize: 24,\r\n      fontWeight: 400,\r\n      x: 50,\r\n      y: 50,\r\n      width: 200,\r\n      height: 50,\r\n      rotation: 0,\r\n      opacity: 1,\r\n    };\r\n    setTexts([...texts, newText]);\r\n    setSelectedTextId(newText.id);\r\n    setShowTextTools(true);\r\n  };\r\n\r\n  const updateText = (id, key, value) => {\r\n    setTexts(texts.map((t) => (t.id === id ? { ...t, [key]: value } : t)));\r\n  };\r\n\r\n  const deleteText = (id) => {\r\n    setTexts(texts.filter((t) => t.id !== id));\r\n    if (selectedTextId === id) setSelectedTextId(null);\r\n  };\r\n\r\n  // ===== Generate Image =====\r\n  const generateFinalImage = () => {\r\n    return new Promise((resolve) => {\r\n      const source = processedImage || imageURL;\r\n      if (!source) return resolve(null);\r\n      const img = new Image();\r\n      img.crossOrigin = \"anonymous\";\r\n      img.onload = () => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const ctx = canvas.getContext(\"2d\");\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        ctx.filter = getFilterStyle().filter || \"none\";\r\n        ctx.drawImage(img, 0, 0);\r\n        texts.forEach((t) => {\r\n          ctx.save();\r\n          ctx.translate(t.x + t.width / 2, t.y + t.height / 2);\r\n          ctx.rotate((t.rotation * Math.PI) / 180);\r\n          ctx.globalAlpha = t.opacity;\r\n          ctx.font = `${t.fontWeight} ${t.fontSize}px Arial`;\r\n          ctx.fillStyle = t.color;\r\n          ctx.textAlign = \"center\";\r\n          ctx.textBaseline = \"middle\";\r\n          ctx.fillText(t.text, 0, 0);\r\n          ctx.restore();\r\n        });\r\n        resolve(canvas.toDataURL(\"image/jpeg\", compression / 100));\r\n      };\r\n      img.src = source;\r\n    });\r\n  };\r\n\r\n  // ===== Download =====\r\n  const handleDownloadImage = async (format) => {\r\n    const finalDataURL = await generateFinalImage();\r\n    if (!finalDataURL) return;\r\n    if (format === \"pdf\") {\r\n      const doc = new jsPDF();\r\n      doc.addImage(finalDataURL, \"JPEG\", 10, 10, 190, 0);\r\n      doc.save(\"docfixer.pdf\");\r\n    } else {\r\n      const link = document.createElement(\"a\");\r\n      link.href = finalDataURL;\r\n      link.download = `docfixer.${format}`;\r\n      link.click();\r\n    }\r\n  };\r\n\r\n  // ===== OCR =====\r\n  const handleOCR = async () => {\r\n    if (!file || !file.type.startsWith(\"image/\"))\r\n      return alert(\"Upload an image for OCR\");\r\n    setOcrText(\"Processing...\");\r\n    Tesseract.recognize(file, \"eng\").then(({ data: { text } }) =>\r\n      setOcrText(text)\r\n    );\r\n  };\r\n\r\n  // ===== Doc Scanner =====\r\n  const handleDocScanner = async () => {\r\n    if (!scannedFiles.length) return alert(\"No images scanned yet\");\r\n    const pdfDoc = await PDFDocument.create();\r\n    for (let imgFile of scannedFiles) {\r\n      const bytes = await imgFile.arrayBuffer();\r\n      const img = imgFile.type.includes(\"png\")\r\n        ? await pdfDoc.embedPng(bytes)\r\n        : await pdfDoc.embedJpg(bytes);\r\n      const page = pdfDoc.addPage([img.width, img.height]);\r\n      page.drawImage(img, { x: 0, y: 0, width: img.width, height: img.height });\r\n    }\r\n    const pdfBytes = await pdfDoc.save();\r\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = \"scanned.pdf\";\r\n    link.click();\r\n  };\r\n\r\n  const addScannedFile = (e) =>\r\n    setScannedFiles([...scannedFiles, ...Array.from(e.target.files)]);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"sidebar\">\r\n        {/* ... Sidebar remains exactly the same ... */}\r\n      </div>\r\n\r\n      <div className=\"editor\">\r\n        {!imageURL ? (\r\n          <div\r\n            className=\"upload-zone\"\r\n            onDrop={handleDrop}\r\n            onDragOver={handleDragOver}\r\n            onClick={() => document.getElementById(\"fileInput\").click()}\r\n          >\r\n            <p>Drag & Drop file here or click to upload</p>\r\n            <input\r\n              id=\"fileInput\"\r\n              type=\"file\"\r\n              accept=\"image/*,application/pdf\"\r\n              onChange={handleFileChange}\r\n              style={{ display: \"none\" }}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {ocrText ? (\r\n              <div style={{ display: \"flex\", gap: \"10px\" }}>\r\n                <div\r\n                  style={{\r\n                    flex: 3,\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    border: \"1px solid #ccc\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={processedImage || imageURL}\r\n                    alt=\"Preview\"\r\n                    style={{ maxWidth: \"100%\", display: \"block\", ...getFilterStyle() }}\r\n                  />\r\n                  {texts.map((t) => (\r\n                    <Rnd\r\n                      key={t.id}\r\n                      size={{ width: t.width, height: t.height }}\r\n                      position={{ x: t.x, y: t.y }}\r\n                      bounds=\"parent\"\r\n                      enableResizing={true}\r\n                      enableUserSelectHack={true}\r\n                      onDragStop={(e, d) => {\r\n                        updateText(t.id, \"x\", d.x);\r\n                        updateText(t.id, \"y\", d.y);\r\n                      }}\r\n                      onResizeStop={(e, dir, ref, delta, pos) => {\r\n                        updateText(t.id, \"width\", parseInt(ref.style.width));\r\n                        updateText(t.id, \"height\", parseInt(ref.style.height));\r\n                        updateText(t.id, \"x\", pos.x);\r\n                        updateText(t.id, \"y\", pos.y);\r\n                      }}\r\n                      onClick={() => setSelectedTextId(t.id)}\r\n                      style={{\r\n                        position: \"absolute\",\r\n                        border: selectedTextId === t.id ? \"2px dashed #007bff\" : \"none\",\r\n                        backgroundColor: \"transparent\",\r\n                        padding: 2,\r\n                        cursor: \"move\",\r\n                      }}\r\n                    >\r\n                      {/* Delete icon */}\r\n                      {selectedTextId === t.id && (\r\n                        <span\r\n                          onClick={(e) => { e.stopPropagation(); deleteText(t.id); }}\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: -10,\r\n                            left: -10,\r\n                            backgroundColor: \"#ff4d4f\",\r\n                            color: \"#fff\",\r\n                            borderRadius: \"50%\",\r\n                            width: 20,\r\n                            height: 20,\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            cursor: \"pointer\",\r\n                            fontSize: 12,\r\n                            fontWeight: \"bold\",\r\n                            zIndex: 10,\r\n                          }}\r\n                        >\r\n                          ×\r\n                        </span>\r\n                      )}\r\n\r\n                      {/* Tick icon */}\r\n                      {selectedTextId === t.id && (\r\n                        <span\r\n                          onClick={(e) => { e.stopPropagation(); setSelectedTextId(null); }}\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: -10,\r\n                            right: -10,\r\n                            backgroundColor: \"#4CAF50\",\r\n                            color: \"#fff\",\r\n                            borderRadius: \"50%\",\r\n                            width: 20,\r\n                            height: 20,\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            cursor: \"pointer\",\r\n                            fontSize: 12,\r\n                            fontWeight: \"bold\",\r\n                            zIndex: 10,\r\n                          }}\r\n                        >\r\n                          ✓\r\n                        </span>\r\n                      )}\r\n\r\n                      {/* Editable text */}\r\n                      <div\r\n                        id={`text-${t.id}`}\r\n                        contentEditable\r\n                        suppressContentEditableWarning\r\n                        style={{\r\n                          display: \"inline-block\",\r\n                          color: t.color,\r\n                          fontSize: t.fontSize,\r\n                          fontWeight: t.fontWeight || 400,\r\n                          outline: \"none\",\r\n                          whiteSpace: \"pre-wrap\",\r\n                          wordBreak: \"break-word\",\r\n                          direction: \"ltr\",\r\n                          textAlign: \"center\",\r\n                          padding: \"2px 4px\",\r\n                        }}\r\n                        onInput={(e) => {\r\n                          const div = e.currentTarget;\r\n                          updateText(t.id, \"text\", div.textContent);\r\n                          updateText(t.id, \"width\", div.scrollWidth + 8);\r\n                          updateText(t.id, \"height\", div.scrollHeight + 4);\r\n                        }}\r\n                      >\r\n                        {t.text}\r\n                      </div>\r\n                    </Rnd>\r\n                  ))}\r\n                </div>\r\n\r\n                {showTextTools && selectedTextId && (\r\n                  <div style={{ flex: 1, border: \"1px solid #ccc\", padding: 10 }}>\r\n                    <h3>Text Options</h3>\r\n\r\n                    <label>\r\n                      Font Size:\r\n                      <input\r\n                        type=\"number\"\r\n                        value={texts.find((t) => t.id === selectedTextId)?.fontSize || 24}\r\n                        onChange={(e) =>\r\n                          updateText(selectedTextId, \"fontSize\", parseInt(e.target.value))\r\n                        }\r\n                        style={{ width: 50, marginLeft: 5 }}\r\n                      />\r\n                    </label>\r\n\r\n                    <div style={{ marginTop: 10 }}>\r\n                      <h4>Color:</h4>\r\n                      <HexColorPicker\r\n                        color={texts.find((t) => t.id === selectedTextId)?.color || \"#ff0000\"}\r\n                        onChange={(color) => updateText(selectedTextId, \"color\", color)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div style={{ marginTop: 10 }}>\r\n                      <h4>Thickness:</h4>\r\n                      <input\r\n                        type=\"range\"\r\n                        min=\"100\"\r\n                        max=\"900\"\r\n                        step=\"100\"\r\n                        value={texts.find((t) => t.id === selectedTextId)?.fontWeight || 400}\r\n                        onChange={(e) => {\r\n                          updateText(selectedTextId, \"fontWeight\", e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <embed src={imageURL} type=\"application/pdf\" width=\"100%\" height=\"500px\" />\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}