{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Desktop\\\\docfixer\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsPDF, PDFDocument } from \"jspdf\";\nimport Tesseract from \"tesseract.js\";\nimport TextEditor from \"./components/TextEditor\"; // <-- Import TextEditor\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [ocrText, setOcrText] = useState(\"\");\n  const [textBoxes, setTextBoxes] = useState([]); // Track all text boxes\n\n  // File upload\n  const handleFileChange = async e => {\n    const uploadedFiles = Array.from(e.target.files);\n    if (!uploadedFiles.length) return;\n    const uploaded = uploadedFiles[0];\n    setFile(uploaded);\n    setImageURL(URL.createObjectURL(uploaded));\n    setProcessedImage(null);\n    setOcrText(\"\");\n    setTextBoxes([]); // Reset text boxes on new file\n  };\n  const handleDrop = async e => {\n    e.preventDefault();\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    if (!droppedFiles.length) return;\n    const dropped = droppedFiles[0];\n    setFile(dropped);\n    setImageURL(URL.createObjectURL(dropped));\n    setProcessedImage(null);\n    setOcrText(\"\");\n    setTextBoxes([]); // Reset text boxes on new file\n  };\n  const handleDragOver = e => e.preventDefault();\n\n  // Background remover\n  const handleRemoveBG = async () => {\n    if (!file) return alert(\"Upload an image first\");\n    if (file.type.includes(\"pdf\")) return alert(\"Works only with images\");\n    const formData = new FormData();\n    formData.append(\"image_file\", file);\n    try {\n      const res = await axios.post(\"https://api.remove.bg/v1.0/removebg\", formData, {\n        headers: {\n          \"X-Api-Key\": \"VSNXBaMjvgBp6NjjRheLV3cW\"\n        },\n        responseType: \"blob\"\n      });\n      setProcessedImage(URL.createObjectURL(res.data));\n    } catch (err) {\n      alert(\"Remove.bg API error: \" + err.message);\n    }\n  };\n\n  // OCR\n  const handleOCR = async () => {\n    if (!file || !file.type.startsWith(\"image/\")) return alert(\"Upload an image for OCR\");\n    setOcrText(\"Processing...\");\n    Tesseract.recognize(file, \"eng\").then(({\n      data: {\n        text\n      }\n    }) => setOcrText(text));\n  };\n\n  // Generate final image with all text boxes\n  const generateFinalImage = async () => {\n    return new Promise(resolve => {\n      const source = processedImage || imageURL;\n      if (!source) return resolve(null);\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext(\"2d\");\n\n        // Draw image\n        ctx.drawImage(img, 0, 0);\n\n        // Draw all text boxes\n        textBoxes.forEach(tb => {\n          ctx.font = `${tb.bold ? \"bold\" : \"normal\"} ${tb.italic ? \"italic\" : \"normal\"} ${tb.fontSize}px Arial`;\n          ctx.textBaseline = \"top\";\n          let text = tb.text;\n          if (tb.upper) text = text.toUpperCase();\n          if (tb.lower) text = text.toLowerCase();\n          ctx.fillStyle = \"#000\"; // Black text\n          if (tb.underline) {\n            ctx.fillText(text, tb.x, tb.y);\n            const width = ctx.measureText(text).width;\n            ctx.beginPath();\n            ctx.moveTo(tb.x, tb.y + tb.fontSize);\n            ctx.lineTo(tb.x + width, tb.y + tb.fontSize);\n            ctx.stroke();\n          } else {\n            ctx.fillText(text, tb.x, tb.y);\n          }\n        });\n        resolve(canvas.toDataURL(\"image/jpeg\"));\n      };\n      img.src = source;\n    });\n  };\n\n  // Download\n  const handleDownload = async format => {\n    const finalDataURL = await generateFinalImage();\n    if (!finalDataURL) return;\n    if (format === \"pdf\") {\n      const doc = new jsPDF();\n      doc.addImage(finalDataURL, \"JPEG\", 10, 10, 190, 0);\n      doc.save(\"docfixer.pdf\");\n    } else {\n      const link = document.createElement(\"a\");\n      link.href = finalDataURL;\n      link.download = `docfixer.${format}`;\n      link.click();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Tools\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRemoveBG,\n        children: \"Remove BG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOCR,\n        children: \"Run OCR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDownload(\"jpeg\"),\n        children: \"JPEG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDownload(\"png\"),\n        children: \"PNG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDownload(\"pdf\"),\n        children: \"PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      children: [!imageURL ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-zone\",\n        onDrop: handleDrop,\n        onDragOver: handleDragOver,\n        onClick: () => document.getElementById(\"fileInput\").click(),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag & Drop file(s) here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"fileInput\",\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleFileChange,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          display: \"inline-block\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: processedImage || imageURL,\n          alt: \"Preview\",\n          style: {\n            maxWidth: \"100%\",\n            display: \"block\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextEditor, {\n          onUpdate: updated => {\n            const index = textBoxes.findIndex(tb => tb.id === updated.id);\n            if (index !== -1) {\n              const newBoxes = [...textBoxes];\n              newBoxes[index] = updated;\n              setTextBoxes(newBoxes);\n            } else {\n              setTextBoxes([...textBoxes, updated]);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), ocrText && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"OCR Extracted Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"8\",\n          value: ocrText,\n          readOnly: true,\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Y6N/A0vdC2ZdeaUwUHWNwwdELm4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsPDF","PDFDocument","Tesseract","TextEditor","jsxDEV","_jsxDEV","App","_s","file","setFile","imageURL","setImageURL","processedImage","setProcessedImage","ocrText","setOcrText","textBoxes","setTextBoxes","handleFileChange","e","uploadedFiles","Array","from","target","files","length","uploaded","URL","createObjectURL","handleDrop","preventDefault","droppedFiles","dataTransfer","dropped","handleDragOver","handleRemoveBG","alert","type","includes","formData","FormData","append","res","post","headers","responseType","data","err","message","handleOCR","startsWith","recognize","then","text","generateFinalImage","Promise","resolve","source","img","Image","crossOrigin","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","forEach","tb","font","bold","italic","fontSize","textBaseline","upper","toUpperCase","lower","toLowerCase","fillStyle","underline","fillText","x","y","measureText","beginPath","moveTo","lineTo","stroke","toDataURL","src","handleDownload","format","finalDataURL","doc","addImage","save","link","href","download","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDrop","onDragOver","getElementById","id","accept","onChange","style","display","position","alt","maxWidth","onUpdate","updated","index","findIndex","newBoxes","marginTop","rows","value","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Desktop/docfixer/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { jsPDF, PDFDocument } from \"jspdf\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport TextEditor from \"./components/TextEditor\"; // <-- Import TextEditor\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const [processedImage, setProcessedImage] = useState(null);\r\n  const [ocrText, setOcrText] = useState(\"\");\r\n  const [textBoxes, setTextBoxes] = useState([]); // Track all text boxes\r\n\r\n  // File upload\r\n  const handleFileChange = async (e) => {\r\n    const uploadedFiles = Array.from(e.target.files);\r\n    if (!uploadedFiles.length) return;\r\n    const uploaded = uploadedFiles[0];\r\n    setFile(uploaded);\r\n    setImageURL(URL.createObjectURL(uploaded));\r\n    setProcessedImage(null);\r\n    setOcrText(\"\");\r\n    setTextBoxes([]); // Reset text boxes on new file\r\n  };\r\n\r\n  const handleDrop = async (e) => {\r\n    e.preventDefault();\r\n    const droppedFiles = Array.from(e.dataTransfer.files);\r\n    if (!droppedFiles.length) return;\r\n    const dropped = droppedFiles[0];\r\n    setFile(dropped);\r\n    setImageURL(URL.createObjectURL(dropped));\r\n    setProcessedImage(null);\r\n    setOcrText(\"\");\r\n    setTextBoxes([]); // Reset text boxes on new file\r\n  };\r\n\r\n  const handleDragOver = (e) => e.preventDefault();\r\n\r\n  // Background remover\r\n  const handleRemoveBG = async () => {\r\n    if (!file) return alert(\"Upload an image first\");\r\n    if (file.type.includes(\"pdf\")) return alert(\"Works only with images\");\r\n    const formData = new FormData();\r\n    formData.append(\"image_file\", file);\r\n    try {\r\n      const res = await axios.post(\r\n        \"https://api.remove.bg/v1.0/removebg\",\r\n        formData,\r\n        {\r\n          headers: { \"X-Api-Key\": \"VSNXBaMjvgBp6NjjRheLV3cW\" },\r\n          responseType: \"blob\",\r\n        }\r\n      );\r\n      setProcessedImage(URL.createObjectURL(res.data));\r\n    } catch (err) {\r\n      alert(\"Remove.bg API error: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // OCR\r\n  const handleOCR = async () => {\r\n    if (!file || !file.type.startsWith(\"image/\"))\r\n      return alert(\"Upload an image for OCR\");\r\n    setOcrText(\"Processing...\");\r\n    Tesseract.recognize(file, \"eng\").then(({ data: { text } }) =>\r\n      setOcrText(text)\r\n    );\r\n  };\r\n\r\n  // Generate final image with all text boxes\r\n  const generateFinalImage = async () => {\r\n    return new Promise((resolve) => {\r\n      const source = processedImage || imageURL;\r\n      if (!source) return resolve(null);\r\n      const img = new Image();\r\n      img.crossOrigin = \"anonymous\";\r\n      img.onload = () => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        // Draw image\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // Draw all text boxes\r\n        textBoxes.forEach((tb) => {\r\n          ctx.font = `${tb.bold ? \"bold\" : \"normal\"} ${tb.italic ? \"italic\" : \"normal\"} ${tb.fontSize}px Arial`;\r\n          ctx.textBaseline = \"top\";\r\n          let text = tb.text;\r\n          if (tb.upper) text = text.toUpperCase();\r\n          if (tb.lower) text = text.toLowerCase();\r\n          ctx.fillStyle = \"#000\"; // Black text\r\n          if (tb.underline) {\r\n            ctx.fillText(text, tb.x, tb.y);\r\n            const width = ctx.measureText(text).width;\r\n            ctx.beginPath();\r\n            ctx.moveTo(tb.x, tb.y + tb.fontSize);\r\n            ctx.lineTo(tb.x + width, tb.y + tb.fontSize);\r\n            ctx.stroke();\r\n          } else {\r\n            ctx.fillText(text, tb.x, tb.y);\r\n          }\r\n        });\r\n\r\n        resolve(canvas.toDataURL(\"image/jpeg\"));\r\n      };\r\n      img.src = source;\r\n    });\r\n  };\r\n\r\n  // Download\r\n  const handleDownload = async (format) => {\r\n    const finalDataURL = await generateFinalImage();\r\n    if (!finalDataURL) return;\r\n\r\n    if (format === \"pdf\") {\r\n      const doc = new jsPDF();\r\n      doc.addImage(finalDataURL, \"JPEG\", 10, 10, 190, 0);\r\n      doc.save(\"docfixer.pdf\");\r\n    } else {\r\n      const link = document.createElement(\"a\");\r\n      link.href = finalDataURL;\r\n      link.download = `docfixer.${format}`;\r\n      link.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"sidebar\">\r\n        <h2>Tools</h2>\r\n        <button onClick={handleRemoveBG}>Remove BG</button>\r\n        <button onClick={handleOCR}>Run OCR</button>\r\n        <h3>Download</h3>\r\n        <button onClick={() => handleDownload(\"jpeg\")}>JPEG</button>\r\n        <button onClick={() => handleDownload(\"png\")}>PNG</button>\r\n        <button onClick={() => handleDownload(\"pdf\")}>PDF</button>\r\n      </div>\r\n\r\n      <div className=\"editor\">\r\n        {!imageURL ? (\r\n          <div\r\n            className=\"upload-zone\"\r\n            onDrop={handleDrop}\r\n            onDragOver={handleDragOver}\r\n            onClick={() => document.getElementById(\"fileInput\").click()}\r\n          >\r\n            <p>Drag & Drop file(s) here or click to upload</p>\r\n            <input\r\n              id=\"fileInput\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={handleFileChange}\r\n              style={{ display: \"none\" }}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n            <img\r\n              src={processedImage || imageURL}\r\n              alt=\"Preview\"\r\n              style={{ maxWidth: \"100%\", display: \"block\" }}\r\n            />\r\n            {/* Render TextEditor over image */}\r\n            <TextEditor onUpdate={(updated) => {\r\n              const index = textBoxes.findIndex(tb => tb.id === updated.id);\r\n              if(index !== -1){\r\n                const newBoxes = [...textBoxes];\r\n                newBoxes[index] = updated;\r\n                setTextBoxes(newBoxes);\r\n              } else {\r\n                setTextBoxes([...textBoxes, updated]);\r\n              }\r\n            }} />\r\n          </div>\r\n        )}\r\n\r\n        {ocrText && (\r\n          <div style={{ marginTop: 20 }}>\r\n            <h3>OCR Extracted Text</h3>\r\n            <textarea\r\n              rows=\"8\"\r\n              value={ocrText}\r\n              readOnly\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}